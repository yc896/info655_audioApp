{"version":3,"sources":["GreenGuitarLogo.png","Song.js","Podcast.js","Playlist.js","ShuffleButton.js","PlayPauseButton.js","PrevButton.js","NextButton.js","Status.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Song","_ref","title","artist","year","React","createElement","className","Podcast","props","displayTitle","podcast","concat","episodeTitle","displayEpisode","season","episode","Playlist","playlistData","onAudioDoubleClick","map","item","index","key","onDoubleClick","data-testid","undefined","ShuffleButton","onClick","PlayPauseButton","isPlaying","PrevButton","event","preventDefault","NextButton","Status","statusText","App","initialPlaylistData","setInitialPlaylistData","useState","setPlaylistData","setIsPlaying","currentTrackIndex","setCurrentTrackIndex","setStatusText","useEffect","fetch","then","response","json","data","catch","error","console","src","logo","alt","handleShuffle","shuffledPlaylist","i","length","j","Math","floor","random","handlePrev","previousIndex","prevTrack","handlePlayPause","prevIsPlaying","handleNext","nextIndex","nextTrack","audioItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.60795281.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GreenGuitarLogo.152cd78f.png\";","import React from 'react';\n\nconst Song = ({ title, artist, year }) => {\n  return (\n    <div className=\"song\">\n      <h2>{title}</h2>\n      <p>Artist: {artist}</p>\n      <p>Year: {year}</p>\n    </div>\n  );\n};\n\nexport default Song;","import React from 'react';\n\nconst Podcast = (props) => {\n  const displayTitle = props.podcast ? `${props.podcast}: ${props.episodeTitle}` : props.episodeTitle;\n  const displayEpisode = props.season\n    ? `Season ${props.season} Episode ${props.episode}`\n    : `Episode ${props.episode}`;\n\n  return (\n    <div className=\"podcast\">\n      <h2>{displayTitle}</h2>\n      <p>{displayEpisode}</p>\n      {/* Other podcast details */}\n    </div>\n  );\n};\n\nexport default Podcast;","import React from 'react';\nimport Song from './Song';\nimport Podcast from './Podcast';\nimport './style.css';\n\nconst Playlist = ({ playlistData, onAudioDoubleClick }) => {\n  return (\n    <div className=\"playlist\">\n      <h2>Audio Playlist</h2>\n      {playlistData.map((item, index) => (\n        <div key={index} onDoubleClick={() => onAudioDoubleClick(item)} data-testid=\"track\">\n          {item.year !== undefined ? (\n            <Song title={item.title} artist={item.artist} year={item.year} />\n          ) : item.episodeTitle !== undefined ? (\n            <Podcast\n              season={item.season}\n              episode={item.episode}\n              episodeTitle={item.episodeTitle}  \n            />\n          ) : (\n            <div>Unknown Audio Type</div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Playlist;","import React from 'react';\n\nconst ShuffleButton = ({ onClick }) => {\n  return (\n    <button onClick={onClick}>\n      Shuffle\n    </button>\n  );\n};\n\nexport default ShuffleButton;\n","import React from 'react';\n\nconst PlayPauseButton = ({ isPlaying, onClick }) => {\n  return (\n    <button onClick={onClick}>\n      {isPlaying ? 'Pause' : 'Play'}\n    </button>\n  );\n};\n\nexport default PlayPauseButton;","import React from 'react';\n\nconst PrevButton = ({ onClick }) => {\n  const handleClick = (event) => {\n    event.preventDefault();\n    onClick(event);\n  };\n\n  return (\n    <button onClick={handleClick}>\n      Prev\n    </button>\n  );\n};\n\nexport default PrevButton;","import React from 'react';\n\nconst NextButton = ({ onClick }) => {\n  return (\n    <button onClick={onClick}>\n      Next\n    </button>\n  );\n};\n\nexport default NextButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './style.css';\n\nconst Status = ({ statusText }) => {\n  return (\n    <div className=\"status-tab\" data-testid=\"status-element\">\n      <p>{statusText || 'No Status'}</p>\n    </div>\n  );\n};\n\nStatus.propTypes = {\n  statusText: PropTypes.string,\n};\n\nexport default Status;","import React, { useState, useEffect } from 'react';\nimport Playlist from './Playlist';\nimport logo from './GreenGuitarLogo.png';\nimport './App.css';\nimport ShuffleButton from './ShuffleButton';\nimport PlayPauseButton from './PlayPauseButton';\nimport PrevButton from './PrevButton';\nimport NextButton from './NextButton';\nimport Status from './Status';\nimport './style.css';\n\nconst App = () => {\n  const [initialPlaylistData, setInitialPlaylistData] = useState([]);\n  const [playlistData, setPlaylistData] = useState([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);\n  const [statusText, setStatusText] = useState('');\n\n  useEffect(() => {\n    fetch('http://localhost:3001/tracks')\n      .then(response => response.json())\n      .then(data => {\n        setInitialPlaylistData(data);\n        setPlaylistData(data);\n      })\n      .catch(error => console.error('Error fetching data:', error));\n  }, []);\n\n  const handleShuffle = () => {\n    const shuffledPlaylist = [...initialPlaylistData];\n    for (let i = shuffledPlaylist.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledPlaylist[i], shuffledPlaylist[j]] = [shuffledPlaylist[j], shuffledPlaylist[i]];\n    }\n    setPlaylistData(shuffledPlaylist);\n    if (isPlaying) {\n      setStatusText(`Playing: ${shuffledPlaylist[currentTrackIndex].title}`);\n    }\n  };\n\n  const handlePrev = () => {\n    const previousIndex = (currentTrackIndex - 1 + playlistData.length) % playlistData.length;\n    const prevTrack = playlistData[previousIndex];\n    \n    if (prevTrack.title) {\n      setStatusText(`Playing: ${prevTrack.title}`);\n    } else if (prevTrack.episodeTitle) {\n      const displayTitle = prevTrack.podcast ? `${prevTrack.podcast}: ${prevTrack.episodeTitle}` : prevTrack.episodeTitle;\n      setStatusText(`Playing: ${displayTitle}`);\n    }\n  \n    setCurrentTrackIndex(previousIndex); // Update current track index\n  \n    // Update play/pause button to display \"play\" if not currently playing\n    if (!isPlaying) {\n      setStatusText('Play');\n    }\n  };\n  \n  const handlePlayPause = () => {\n    setIsPlaying(prevIsPlaying => !prevIsPlaying);\n    if (!isPlaying) {\n      setStatusText(`Playing: ${playlistData[currentTrackIndex].title}`);\n    } else {\n      setStatusText('Paused');\n    }\n  };\n\n  const handleNext = () => {\n    const nextIndex = (currentTrackIndex + 1) % playlistData.length;\n    const nextTrack = playlistData[nextIndex];\n  \n    if (nextTrack.title) {\n      setStatusText(`Playing: ${nextTrack.title}`);\n    } else if (nextTrack.episodeTitle) {\n      const displayTitle = nextTrack.podcast ? `${nextTrack.podcast}: ${nextTrack.episodeTitle}` : nextTrack.episodeTitle;\n      setStatusText(`Playing: ${displayTitle}`);\n    }\n  \n    setCurrentTrackIndex(nextIndex); // Update current track index\n  \n    // Update play/pause button to display \"play\" if not currently playing\n    if (!isPlaying) {\n      setStatusText('Play');\n    }\n  };\n  const handleAudioDoubleClick = audioItem => {\n    if (audioItem.title) {\n      setStatusText(`Playing: ${audioItem.title}`);\n    } else if (audioItem.episodeTitle) {\n      const displayTitle = audioItem.podcast ? `${audioItem.podcast}: ${audioItem.episodeTitle}` : audioItem.episodeTitle;\n      setStatusText(`Playing: ${displayTitle}`);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <img className=\"logo\" src={logo} alt=\"Logo\" />\n      <h1 className=\"header\">Drexel Music</h1>\n      <Status statusText={statusText} />\n      <div className=\"controls\">\n        <ShuffleButton onClick={handleShuffle} />\n        <PrevButton onClick={handlePrev} />\n        <PlayPauseButton isPlaying={isPlaying} onClick={handlePlayPause} />\n        <NextButton onClick={handleNext} />\n      </div>\n      \n      <Playlist\n        playlistData={playlistData}\n        onAudioDoubleClick={handleAudioDoubleClick}\n      />\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}